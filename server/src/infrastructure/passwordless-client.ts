import crypto from "node:crypto";

export class PasswordlessClient {
  constructor(private apiUrl: string, private apiSecret: string) {}

  async register(
    email: string,
    name: string
  ): Promise<{ token: string; userId: string }> {
    const userId = crypto.randomUUID();

    const payload = {
      userId, // A WebAuthn User Handle, which should be generated by your application. Max. 64 bytes.
      displayname: name, // A human-palatable name for the account, which should be chosen by the user.
      username: email, // A username used for user authentication, should be chosen by the user.
      aliases: [email],
      attType: "None", // WebAuthn attestation conveyance. Can be "none" (default), "direct", or "indirect".
      authType: "platform", // WebAuthn authenticator attachment modality. Can be "platform" (default), which triggers client device-specific options Windows Hello, FaceID, or TouchID, or "cross-platform", which triggers roaming options like security keys.
      userVerification: "preferred", // Whether the relying party requires locally-invoked authorization for the operation. Can be "preferred" (default), "required", or "optional".
      // expiresAt: "3023-08-01T14:43:03Z", // Timestamp (UTC) when the registration token should expire. By default, current time + 120 seconds.
    };

    const response = await fetch(`${this.apiUrl}/register/token`, {
      method: "POST",
      body: JSON.stringify(payload),
      headers: {
        ApiSecret: this.apiSecret,
        "Content-Type": "application/json",
      },
    });

    if (response.status > 299) {
      console.error(response.status, await response.text());
      throw new Error("Something happened when calling passwordless");
    }

    const token = await response.text();
    // const token = "something fake";

    return { token, userId };
  }
}
